{"ast":null,"code":"var _jsxFileName = \"/Users/victorlieu/Desktop/Development/404Project/frontend/src/components/Posts/AddComment.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport Avatar from '@mui/material/Avatar';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemText from '@mui/material/ListItemText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Dialog from '@mui/material/Dialog';\nimport PersonIcon from '@mui/icons-material/Person';\nimport AddIcon from '@mui/icons-material/Add';\nimport Typography from '@mui/material/Typography';\nimport { blue } from '@mui/material/colors';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport './SimpleDialog.css';\nimport requests from '../../requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EditComment(props) {\n  _s();\n\n  const [open, setOpen] = React.useState(false);\n  const [comments, setComments] = React.useState(0); //   const getComments = async () => {\n  //     try {\n  //       const response = await requests.get(`service/authors/${props.author_id}/posts/${props.post_id}/comments/`,\n  //       {headers: {\n  //       Authorization: localStorage.getItem('access_token'),\n  //       accept: 'application/json',\n  //       }},\n  //       {withCredentials:true});\n  //       console.log(response.data.items);\n  //       var ids = [];\n  //       var commenter_ids = [];\n  //       var comment_ids = [];\n  //       response.data.items.forEach((comment) =>  {\n  //         ids.push(comment.comment);\n  //         commenter_ids.push(comment.author);\n  //         comment_ids.push(comment.id);\n  //       });\n  //       setComments(ids);\n  //       setCommenters(commenter_ids);\n  //       setCommentIds(comment_ids);\n  //     }\n  //     catch(error) {\n  //       console.log(error);\n  //     }\n  //   };\n  //   React.useEffect(() => {\n  //     getComments();\n  //   }, []);\n\n  const handleClickOpen = async () => {\n    setOpen(true);\n  };\n\n  const handleClose = value => {\n    setOpen(false); // setSelectedValue(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: handleClickOpen,\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"commentDialog\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EditComment, \"HGLEJasvX4QY4ufSAAoD6DG3pPw=\");\n\n_c = EditComment;\n\nfunction commentDialog(props) {\n  //   var authors = props.commenters ? props.commenters : [];\n  //   var comments = props.comments ? props.comments : [];\n  //   const { onClose, selectedValue, open } = props;\n  //   const [commentText, setCommentText] = React.useState(\"\")\n  const handleClose = () => {\n    onClose(selectedValue);\n  };\n\n  const handleListItemClick = value => {\n    alert(\"Create New Comment Clicked\");\n    onClose();\n  };\n\n  const handleEdit = value => {\n    alert(\"Edit Clicked\");\n  }; // Handles the deletion of a comment within the dialog listview after confirmation\n\n\n  const handleDelete = async index => {\n    // TODO switch to an actual confirm dialogue\n    if (window.confirm(\"Do you really want to delete this comment?\")) {\n      try {\n        var comment_id = props.comment_id[index];\n        const response = await requests.delete(`service/authors/${props.author_id}/posts/${props.post_id}/comments/${comment_id}/`, {\n          headers: {\n            Authorization: localStorage.getItem('access_token'),\n            accept: 'application/json'\n          }\n        }, {\n          withCredentials: true\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    onClose: handleClose,\n    maxWidth: \"800px\",\n    open: open,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      className: \"comment-dialog\",\n      children: \"Edit Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      sx: {\n        pt: 0\n      },\n      children: /*#__PURE__*/_jsxDEV(ListItem, {\n        autoFocus: true,\n        button: true,\n        onClick: () => handleListItemClick('addComment'),\n        children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: \"Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n\ncommentDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  selectedValue: PropTypes.string.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"EditComment\");","map":{"version":3,"sources":["/Users/victorlieu/Desktop/Development/404Project/frontend/src/components/Posts/AddComment.js"],"names":["React","PropTypes","Button","Avatar","List","ListItem","ListItemAvatar","ListItemText","DialogTitle","Dialog","PersonIcon","AddIcon","Typography","blue","DeleteIcon","EditIcon","requests","EditComment","props","open","setOpen","useState","comments","setComments","handleClickOpen","handleClose","value","commentDialog","onClose","selectedValue","handleListItemClick","alert","handleEdit","handleDelete","index","window","confirm","comment_id","response","delete","author_id","post_id","headers","Authorization","localStorage","getItem","accept","withCredentials","error","console","log","pt","propTypes","func","isRequired","bool","string"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport Avatar from '@mui/material/Avatar';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemText from '@mui/material/ListItemText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Dialog from '@mui/material/Dialog';\nimport PersonIcon from '@mui/icons-material/Person';\nimport AddIcon from '@mui/icons-material/Add';\nimport Typography from '@mui/material/Typography';\nimport { blue } from '@mui/material/colors';\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport EditIcon from '@mui/icons-material/Edit';\nimport './SimpleDialog.css';\nimport requests from '../../requests';\n\nexport default function EditComment(props) {\n  const [open, setOpen] = React.useState(false);\n  const [comments, setComments] = React.useState(0);\n\n//   const getComments = async () => {\n//     try {\n//       const response = await requests.get(`service/authors/${props.author_id}/posts/${props.post_id}/comments/`,\n//       {headers: {\n//       Authorization: localStorage.getItem('access_token'),\n//       accept: 'application/json',\n//       }},\n//       {withCredentials:true});\n//       console.log(response.data.items);\n//       var ids = [];\n//       var commenter_ids = [];\n//       var comment_ids = [];\n//       response.data.items.forEach((comment) =>  {\n//         ids.push(comment.comment);\n//         commenter_ids.push(comment.author);\n//         comment_ids.push(comment.id);\n//       });\n//       setComments(ids);\n//       setCommenters(commenter_ids);\n//       setCommentIds(comment_ids);\n//     }\n//     catch(error) {\n//       console.log(error);\n//     }\n//   };\n\n//   React.useEffect(() => {\n//     getComments();\n//   }, []);\n\n\nconst handleClickOpen = async () => {\n    setOpen(true);\n};\n\n  const handleClose = (value) => {\n    setOpen(false);\n    // setSelectedValue(value);\n  };\n\n  return (\n    <div>\n      <Button variant=\"outlined\" onClick={handleClickOpen}>\n        Edit\n      </Button>\n      <commentDialog\n        // selectedValue={selectedValue}\n        // author_id = {props.author_id}\n        // open={open}\n        // onClose={handleClose}\n        // post_id = {props.post_id}\n        // comments = {comments}\n        // commenters = {commenters}\n        // comment_id = {ids}\n      />\n    </div>\n  );\n}\n\nfunction commentDialog(props) {\n\n//   var authors = props.commenters ? props.commenters : [];\n//   var comments = props.comments ? props.comments : [];\n//   const { onClose, selectedValue, open } = props;\n//   const [commentText, setCommentText] = React.useState(\"\")\n\n  const handleClose = () => {\n    onClose(selectedValue);\n  };\n\n  const handleListItemClick = (value) => {\n    alert(\"Create New Comment Clicked\");\n    onClose();\n    \n\n  };\n\n  const handleEdit = (value) => {\n    alert(\"Edit Clicked\");\n  }\n\n  // Handles the deletion of a comment within the dialog listview after confirmation\n  const handleDelete = async (index) => {\n    // TODO switch to an actual confirm dialogue\n    if (window.confirm(\"Do you really want to delete this comment?\")) {\n    try {\n      var comment_id = props.comment_id[index]\n      const response = await requests.delete(`service/authors/${props.author_id}/posts/${props.post_id}/comments/${comment_id}/`,\n      {headers: {\n      Authorization: localStorage.getItem('access_token'),\n      accept: 'application/json',\n      }},\n      {withCredentials:true});\n    }\n    catch(error) {\n      console.log(error);\n    }\n  }\n  }\n\n  return (\n    <Dialog onClose={handleClose} maxWidth=\"800px\" open={open}>\n      <DialogTitle className=\"comment-dialog\">Edit Comment</DialogTitle>\n      <List sx={{ pt: 0 }}>\n        {/* {authors.map((author, index) => (\n          <ListItem button key={author}>\n            <ListItemAvatar>\n              <Avatar sx={{ bgcolor: blue[100], color: blue[600] }}>\n                <PersonIcon />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={`${author}: ${comments[index]}`} />\n            <Button className = \"edit-button\" variant=\"contained\" endIcon={<EditIcon />} onClick={() => handleEdit(index)}>\n              Edit \n            </Button>\n            <Button className = \"comment-button\" color = \"error\" variant=\"contained\" startIcon={<DeleteIcon />} onClick={() => handleDelete(index)}>\n              Delete\n            </Button>\n          </ListItem>\n        ))} */}\n\n        <ListItem autoFocus button onClick={() => handleListItemClick('addComment')}>\n          <ListItemAvatar>\n            <Avatar>\n              <AddIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary=\"Add Comment\" />\n        </ListItem>\n      </List>\n    </Dialog>\n  );\n}\n\ncommentDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  selectedValue: PropTypes.string.isRequired,\n};"]},"metadata":{},"sourceType":"module"}