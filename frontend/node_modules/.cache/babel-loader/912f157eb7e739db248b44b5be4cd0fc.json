{"ast":null,"code":"var _jsxFileName = \"/Users/victorlieu/Desktop/Development/404Project/frontend/src/components/Posts/CommentDialog.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport Avatar from '@mui/material/Avatar';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemText from '@mui/material/ListItemText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Dialog from '@mui/material/Dialog';\nimport PersonIcon from '@mui/icons-material/Person';\nimport { blue } from '@mui/material/colors';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport './CommentDialog.css';\nimport { EditComment, AddCommentListItem } from './AddComment';\nimport requests from '../../requests';\nimport { usePreviousProps } from '@mui/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CommentDialogButton(props) {\n  _s();\n\n  const [open, setOpen] = React.useState(false);\n  const [comments, setComments] = React.useState(0);\n  const [commenters, setCommenters] = React.useState(0);\n  const [ids, setCommentIds] = React.useState(0);\n\n  const getComments = async () => {\n    try {\n      const response = await requests.get(`service/authors/${props.author_id}/posts/${props.post_id}/comments/`, {\n        headers: {\n          Authorization: localStorage.getItem('access_token'),\n          accept: 'application/json'\n        }\n      }, {\n        withCredentials: true\n      });\n      console.log(response.data.items);\n      var ids = [];\n      var commenter_ids = [];\n      var comment_ids = [];\n      response.data.items.forEach(comment => {\n        ids.push(comment.comment);\n        commenter_ids.push(comment.author);\n        comment_ids.push(comment.id);\n      });\n      setComments(ids);\n      setCommenters(commenter_ids);\n      setCommentIds(comment_ids);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  React.useEffect(() => {\n    getComments();\n  }, []);\n\n  const handleClickOpen = async () => {\n    setOpen(true);\n  };\n\n  const handleClose = value => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: handleClickOpen,\n      children: \"View Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommentDialog, {\n      current_author: props.current_author,\n      author_id: props.author_id,\n      open: open,\n      onClose: handleClose,\n      post_id: props.post_id,\n      comments: comments,\n      commenters: commenters,\n      comment_id: ids\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CommentDialogButton, \"TWnFMVc/nvXyVuQ+v0fy0vM4fzA=\");\n\n_c = CommentDialogButton;\n\nfunction CommentDialog(props) {\n  _s2();\n\n  var authors = props.commenters ? props.commenters : [];\n  var comments = props.comments ? props.comments : [];\n  const {\n    onClose,\n    selectedValue,\n    open\n  } = props;\n  const [commentText, setCommentText] = React.useState(\"\");\n\n  const handleClose = () => {\n    onClose(selectedValue);\n  }; // Handles the deletion of a comment within the dialog listview after confirmation\n\n\n  const handleDelete = async index => {\n    // TODO switch to an actual confirm dialogue\n    if (window.confirm(\"Do you really want to delete this comment?\")) {\n      try {\n        var comment_id = props.comment_id[index];\n        const response = await requests.delete(`service/authors/${props.author_id}/posts/${props.post_id}/comments/${comment_id}/`, {\n          headers: {\n            Authorization: localStorage.getItem('access_token'),\n            accept: 'application/json'\n          }\n        }, {\n          withCredentials: true\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    onClose: handleClose,\n    maxWidth: \"800px\",\n    open: open,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      className: \"comment-dialog\",\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      sx: {\n        pt: 0\n      },\n      children: [authors.map((author, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n        button: true,\n        children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            sx: {\n              bgcolor: blue[100],\n              color: blue[600]\n            },\n            children: /*#__PURE__*/_jsxDEV(PersonIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: `${author}: ${comments[index]}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), author === props.current_author ? /*#__PURE__*/_jsxDEV(AddComment, {\n          current_author: props.current_author,\n          post_author: props.author_id,\n          post_id: props.post_id,\n          comment_id: props.comment_id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this) : '', author === props.current_author ? /*#__PURE__*/_jsxDEV(Button, {\n          className: \"comment-button\",\n          color: \"error\",\n          variant: \"contained\",\n          startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 132\n          }, this),\n          onClick: () => handleDelete(index),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 48\n        }, this) : '']\n      }, author, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(AddCommentListItem, {\n        current_author: props.current_author,\n        post_author: props.author_id,\n        post_id: props.post_id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(CommentDialog, \"p4TF37JcSOEexXz8bq9p43U5U1Q=\");\n\n_c2 = CommentDialog;\nCommentDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CommentDialogButton\");\n$RefreshReg$(_c2, \"CommentDialog\");","map":{"version":3,"sources":["/Users/victorlieu/Desktop/Development/404Project/frontend/src/components/Posts/CommentDialog.js"],"names":["React","PropTypes","Button","Avatar","List","ListItem","ListItemAvatar","ListItemText","DialogTitle","Dialog","PersonIcon","blue","DeleteIcon","EditComment","AddCommentListItem","requests","usePreviousProps","CommentDialogButton","props","open","setOpen","useState","comments","setComments","commenters","setCommenters","ids","setCommentIds","getComments","response","get","author_id","post_id","headers","Authorization","localStorage","getItem","accept","withCredentials","console","log","data","items","commenter_ids","comment_ids","forEach","comment","push","author","id","error","useEffect","handleClickOpen","handleClose","value","current_author","CommentDialog","authors","onClose","selectedValue","commentText","setCommentText","handleDelete","index","window","confirm","comment_id","delete","pt","map","bgcolor","color","propTypes","func","isRequired","bool"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAO,qBAAP;AACA,SAAQC,WAAR,EAAqBC,kBAArB,QAA8C,cAA9C;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,gBAAT,QAAiC,YAAjC;;AAEA,eAAe,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AACjD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBpB,KAAK,CAACqB,QAAN,CAAe,KAAf,CAAxB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BvB,KAAK,CAACqB,QAAN,CAAe,CAAf,CAAhC;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BzB,KAAK,CAACqB,QAAN,CAAe,CAAf,CAApC;AACA,QAAM,CAACK,GAAD,EAAMC,aAAN,IAAuB3B,KAAK,CAACqB,QAAN,CAAe,CAAf,CAA7B;;AAEA,QAAMO,WAAW,GAAG,YAAY;AAC9B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMd,QAAQ,CAACe,GAAT,CAAc,mBAAkBZ,KAAK,CAACa,SAAU,UAASb,KAAK,CAACc,OAAQ,YAAvE,EACvB;AAACC,QAAAA,OAAO,EAAE;AACVC,UAAAA,aAAa,EAAEC,YAAY,CAACC,OAAb,CAAqB,cAArB,CADL;AAEVC,UAAAA,MAAM,EAAE;AAFE;AAAV,OADuB,EAKvB;AAACC,QAAAA,eAAe,EAAC;AAAjB,OALuB,CAAvB;AAMAC,MAAAA,OAAO,CAACC,GAAR,CAAYX,QAAQ,CAACY,IAAT,CAAcC,KAA1B;AACA,UAAIhB,GAAG,GAAG,EAAV;AACA,UAAIiB,aAAa,GAAG,EAApB;AACA,UAAIC,WAAW,GAAG,EAAlB;AACAf,MAAAA,QAAQ,CAACY,IAAT,CAAcC,KAAd,CAAoBG,OAApB,CAA6BC,OAAD,IAAc;AACxCpB,QAAAA,GAAG,CAACqB,IAAJ,CAASD,OAAO,CAACA,OAAjB;AACAH,QAAAA,aAAa,CAACI,IAAd,CAAmBD,OAAO,CAACE,MAA3B;AACAJ,QAAAA,WAAW,CAACG,IAAZ,CAAiBD,OAAO,CAACG,EAAzB;AACD,OAJD;AAKA1B,MAAAA,WAAW,CAACG,GAAD,CAAX;AACAD,MAAAA,aAAa,CAACkB,aAAD,CAAb;AACAhB,MAAAA,aAAa,CAACiB,WAAD,CAAb;AACD,KAnBD,CAoBA,OAAMM,KAAN,EAAa;AACXX,MAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ;AACD;AACF,GAxBD;;AA0BAlD,EAAAA,KAAK,CAACmD,SAAN,CAAgB,MAAM;AACpBvB,IAAAA,WAAW;AACZ,GAFD,EAEG,EAFH;;AAKF,QAAMwB,eAAe,GAAG,YAAY;AAChChC,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH,GAFD;;AAIE,QAAMiC,WAAW,GAAIC,KAAD,IAAW;AAC7BlC,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,UAAhB;AAA2B,MAAA,OAAO,EAAEgC,eAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,aAAD;AACE,MAAA,cAAc,EAAIlC,KAAK,CAACqC,cAD1B;AAEE,MAAA,SAAS,EAAIrC,KAAK,CAACa,SAFrB;AAGE,MAAA,IAAI,EAAEZ,IAHR;AAIE,MAAA,OAAO,EAAEkC,WAJX;AAKE,MAAA,OAAO,EAAInC,KAAK,CAACc,OALnB;AAME,MAAA,QAAQ,EAAIV,QANd;AAOE,MAAA,UAAU,EAAIE,UAPhB;AAQE,MAAA,UAAU,EAAIE;AARhB;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GA9DuBT,mB;;KAAAA,mB;;AAgExB,SAASuC,aAAT,CAAuBtC,KAAvB,EAA8B;AAAA;;AAE5B,MAAIuC,OAAO,GAAGvC,KAAK,CAACM,UAAN,GAAmBN,KAAK,CAACM,UAAzB,GAAsC,EAApD;AACA,MAAIF,QAAQ,GAAGJ,KAAK,CAACI,QAAN,GAAiBJ,KAAK,CAACI,QAAvB,GAAkC,EAAjD;AACA,QAAM;AAAEoC,IAAAA,OAAF;AAAWC,IAAAA,aAAX;AAA0BxC,IAAAA;AAA1B,MAAmCD,KAAzC;AACA,QAAM,CAAC0C,WAAD,EAAcC,cAAd,IAAgC7D,KAAK,CAACqB,QAAN,CAAe,EAAf,CAAtC;;AAEA,QAAMgC,WAAW,GAAG,MAAM;AACxBK,IAAAA,OAAO,CAACC,aAAD,CAAP;AACD,GAFD,CAP4B,CAW5B;;;AACA,QAAMG,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC;AACA,QAAIC,MAAM,CAACC,OAAP,CAAe,4CAAf,CAAJ,EAAkE;AAClE,UAAI;AACF,YAAIC,UAAU,GAAGhD,KAAK,CAACgD,UAAN,CAAiBH,KAAjB,CAAjB;AACA,cAAMlC,QAAQ,GAAG,MAAMd,QAAQ,CAACoD,MAAT,CAAiB,mBAAkBjD,KAAK,CAACa,SAAU,UAASb,KAAK,CAACc,OAAQ,aAAYkC,UAAW,GAAjG,EACvB;AAACjC,UAAAA,OAAO,EAAE;AACVC,YAAAA,aAAa,EAAEC,YAAY,CAACC,OAAb,CAAqB,cAArB,CADL;AAEVC,YAAAA,MAAM,EAAE;AAFE;AAAV,SADuB,EAKvB;AAACC,UAAAA,eAAe,EAAC;AAAjB,SALuB,CAAvB;AAMD,OARD,CASA,OAAMY,KAAN,EAAa;AACXX,QAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ;AACD;AACF;AACF,GAhBC;;AAkBA,sBACE,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAEG,WAAjB;AAA8B,IAAA,QAAQ,EAAC,OAAvC;AAA+C,IAAA,IAAI,EAAElC,IAArD;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,SAAS,EAAC,gBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,EAAE,EAAE;AAAEiD,QAAAA,EAAE,EAAE;AAAN,OAAV;AAAA,iBACGX,OAAO,CAACY,GAAR,CAAY,CAACrB,MAAD,EAASe,KAAT,kBACX,QAAC,QAAD;AAAU,QAAA,MAAM,MAAhB;AAAA,gCACE,QAAC,cAAD;AAAA,iCACE,QAAC,MAAD;AAAQ,YAAA,EAAE,EAAE;AAAEO,cAAAA,OAAO,EAAE3D,IAAI,CAAC,GAAD,CAAf;AAAsB4D,cAAAA,KAAK,EAAE5D,IAAI,CAAC,GAAD;AAAjC,aAAZ;AAAA,mCACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAME,QAAC,YAAD;AAAc,UAAA,OAAO,EAAG,GAAEqC,MAAO,KAAI1B,QAAQ,CAACyC,KAAD,CAAQ;AAArD;AAAA;AAAA;AAAA;AAAA,gBANF,EAOGf,MAAM,KAAK9B,KAAK,CAACqC,cAAjB,gBACD,QAAC,UAAD;AACE,UAAA,cAAc,EAAIrC,KAAK,CAACqC,cAD1B;AAEE,UAAA,WAAW,EAAIrC,KAAK,CAACa,SAFvB;AAGE,UAAA,OAAO,EAAIb,KAAK,CAACc,OAHnB;AAIE,UAAA,UAAU,EAAId,KAAK,CAACgD;AAJtB;AAAA;AAAA;AAAA;AAAA,gBADC,GAKqC,EAZxC,EAaGlB,MAAM,KAAK9B,KAAK,CAACqC,cAAjB,gBAAkC,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAG,gBAApB;AAAqC,UAAA,KAAK,EAAG,OAA7C;AAAqD,UAAA,OAAO,EAAC,WAA7D;AAAyE,UAAA,SAAS,eAAE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,kBAApF;AAAoG,UAAA,OAAO,EAAE,MAAMO,YAAY,CAACC,KAAD,CAA/H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAlC,GAEW,EAfd;AAAA,SAAsBf,MAAtB;AAAA;AAAA;AAAA;AAAA,cADD,CADH,eAoBE,QAAC,kBAAD;AACA,QAAA,cAAc,EAAI9B,KAAK,CAACqC,cADxB;AAEA,QAAA,WAAW,EAAIrC,KAAK,CAACa,SAFrB;AAGA,QAAA,OAAO,EAAIb,KAAK,CAACc;AAHjB;AAAA;AAAA;AAAA;AAAA,cApBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD;;IA5DQwB,a;;MAAAA,a;AA8DTA,aAAa,CAACgB,SAAd,GAA0B;AACxBd,EAAAA,OAAO,EAAEzD,SAAS,CAACwE,IAAV,CAAeC,UADA;AAExBvD,EAAAA,IAAI,EAAElB,SAAS,CAAC0E,IAAV,CAAeD;AAFG,CAA1B","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport Avatar from '@mui/material/Avatar';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemText from '@mui/material/ListItemText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Dialog from '@mui/material/Dialog';\nimport PersonIcon from '@mui/icons-material/Person';\nimport { blue } from '@mui/material/colors';\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport './CommentDialog.css';\nimport {EditComment, AddCommentListItem} from './AddComment';\nimport requests from '../../requests';\nimport { usePreviousProps } from '@mui/utils';\n\nexport default function CommentDialogButton(props) {\n  const [open, setOpen] = React.useState(false);\n  const [comments, setComments] = React.useState(0);\n  const [commenters, setCommenters] = React.useState(0);\n  const [ids, setCommentIds] = React.useState(0); \n\n  const getComments = async () => {\n    try {\n      const response = await requests.get(`service/authors/${props.author_id}/posts/${props.post_id}/comments/`,\n      {headers: {\n      Authorization: localStorage.getItem('access_token'),\n      accept: 'application/json',\n      }},\n      {withCredentials:true});\n      console.log(response.data.items);\n      var ids = [];\n      var commenter_ids = [];\n      var comment_ids = [];\n      response.data.items.forEach((comment) =>  {\n        ids.push(comment.comment);\n        commenter_ids.push(comment.author);\n        comment_ids.push(comment.id);\n      });\n      setComments(ids);\n      setCommenters(commenter_ids);\n      setCommentIds(comment_ids);\n    }\n    catch(error) {\n      console.log(error);\n    }\n  };\n\n  React.useEffect(() => {\n    getComments();\n  }, []);\n\n\nconst handleClickOpen = async () => {\n    setOpen(true);\n};\n\n  const handleClose = (value) => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Button variant=\"outlined\" onClick={handleClickOpen}>\n        View Comments\n      </Button>\n      <CommentDialog\n        current_author = {props.current_author}\n        author_id = {props.author_id}\n        open={open}\n        onClose={handleClose}\n        post_id = {props.post_id}\n        comments = {comments}\n        commenters = {commenters}\n        comment_id = {ids}\n      />\n    </div>\n  );\n}\n\nfunction CommentDialog(props) {\n\n  var authors = props.commenters ? props.commenters : [];\n  var comments = props.comments ? props.comments : [];\n  const { onClose, selectedValue, open } = props;\n  const [commentText, setCommentText] = React.useState(\"\")\n\n  const handleClose = () => {\n    onClose(selectedValue);\n  };\n\n  // Handles the deletion of a comment within the dialog listview after confirmation\n  const handleDelete = async (index) => {\n    // TODO switch to an actual confirm dialogue\n    if (window.confirm(\"Do you really want to delete this comment?\")) {\n    try {\n      var comment_id = props.comment_id[index]\n      const response = await requests.delete(`service/authors/${props.author_id}/posts/${props.post_id}/comments/${comment_id}/`,\n      {headers: {\n      Authorization: localStorage.getItem('access_token'),\n      accept: 'application/json',\n      }},\n      {withCredentials:true});\n    }\n    catch(error) {\n      console.log(error);\n    }\n  }\n}\n\n  return (\n    <Dialog onClose={handleClose} maxWidth=\"800px\" open={open}>\n      <DialogTitle className=\"comment-dialog\">Comments</DialogTitle>\n      <List sx={{ pt: 0 }}>\n        {authors.map((author, index) => (\n          <ListItem button key={author}>\n            <ListItemAvatar>\n              <Avatar sx={{ bgcolor: blue[100], color: blue[600] }}>\n                <PersonIcon />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={`${author}: ${comments[index]}`} />\n            {author === props.current_author ? \n            <AddComment\n              current_author = {props.current_author}\n              post_author = {props.author_id}\n              post_id = {props.post_id}\n              comment_id = {props.comment_id}/> : ''}\n            {author === props.current_author ? <Button className = \"comment-button\" color = \"error\" variant=\"contained\" startIcon={<DeleteIcon />} onClick={() => handleDelete(index)}>\n              Delete\n            </Button> : ''}\n          </ListItem>\n        ))}\n        <AddCommentListItem\n        current_author = {props.current_author}\n        post_author = {props.author_id}\n        post_id = {props.post_id}/>\n      </List>\n    </Dialog>\n  );\n}\n\nCommentDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired\n};"]},"metadata":{},"sourceType":"module"}