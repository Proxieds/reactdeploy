{"ast":null,"code":"var _jsxFileName = \"/Users/victorlieu/Desktop/Development/404Project/frontend/src/components/Posts/NewPost.js\";\nimport React, { Component } from \"react\"; // import './App.css';\n\nimport { Button, TextField, MenuItem, FormControl, FormGroup, Grid } from \"@mui/material\";\nimport requests from \"../../requests\";\nimport { Redirect } from \"react-router-dom\";\nimport FileBase64 from \"react-file-base64\"; // TODO: Add form validation\n//import { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\n// TODOS:\n// Form validation\n// print error messages\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewPost extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      description: \"\",\n      content_type: \"text/plain\",\n      content: \"\",\n      categories: \"\",\n      visibility: \"PUBLIC\",\n      unlisted: false,\n      successful_post: false,\n      author_id: \"\",\n      viewableBy: \"\",\n      jwt: localStorage.getItem(\"access_token\")\n    };\n\n    this.getAuthorId = async () => {\n      const response = await requests.get(\"get-user/\", {\n        headers: {\n          Authorization: this.state.jwt,\n          accept: \"application/json\"\n        }\n      });\n      this.setState({\n        author_id: response.data.id ? response.data.id : \"\"\n      });\n    };\n\n    this.handleSubmit = async () => {\n      requests.defaults.headers[\"Authorization\"] = this.state.jwt;\n\n      try {\n        const url = \"authors/\" + this.state.author_id + \"/posts/\";\n        const response = await requests.post(url, {\n          headers: {\n            accept: \"application/json\"\n          },\n          title: this.state.title,\n          author: this.state.author_id,\n          contentType: this.state.content_type,\n          content: this.state.content,\n          description: this.state.description,\n          visibility: this.state.visibility,\n          unlisted: this.state.unlisted,\n          categories: this.state.categories,\n          viewableBy: this.state.viewableBy\n        });\n        this.setState({\n          successful_post: true\n        });\n        response.data.type = 'post';\n\n        if (!response.data.unlisted) {\n          this.sendToSelf(response.data);\n          this.sendToFollowers(response.data);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.sendToSelf = async my_post => {\n      await requests.post(`authors/${this.state.author_id}/inbox/`, my_post, {\n        headers: {\n          Authorization: localStorage.getItem('access_token'),\n          accept: 'application/json'\n        }\n      }, {\n        withCredentials: true\n      });\n    };\n\n    this.sendToFollowers = async my_post => {\n      // Get Followers\n      const response = await requests.get(`authors/${my_post.author.id}/followers/`);\n      const followerList = response.data.items; // For each follower: send post to inbox\n\n      for (let index = 0; index < followerList.length; ++index) {\n        const follower = followerList[index];\n        await requests.post(`authors/${follower.id}/inbox/`, my_post, {\n          headers: {\n            Authorization: localStorage.getItem('access_token'),\n            accept: 'application/json'\n          }\n        }, {\n          withCredentials: true\n        });\n      }\n    };\n\n    this.getAuthorId();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        component: \"fieldset\",\n        variant: \"filled\",\n        disabled: true,\n        style: {\n          width: \"35em\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"New Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            className: \"text-input\",\n            size: \"small\",\n            type: \"text\",\n            fullWidth: true,\n            label: \"Title\",\n            value: this.state.title,\n            onChange: _ref => {\n              let {\n                target\n              } = _ref;\n              return this.setState({\n                title: target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            className: \"text-input\",\n            size: \"small\",\n            type: \"text\",\n            fullWidth: true,\n            label: \"Description\",\n            value: this.state.description,\n            onChange: _ref2 => {\n              let {\n                target\n              } = _ref2;\n              return this.setState({\n                description: target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            select: true,\n            value: this.state.content_type,\n            label: \"Content Type\",\n            fullWidth: true,\n            onChange: _ref3 => {\n              let {\n                target\n              } = _ref3;\n              return this.setState({\n                content_type: target.value\n              });\n            },\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"text/plain\",\n              children: \"text/plain\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"text/markdown\",\n              children: \"text/markdown\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"application/base64\",\n              children: \"application/base64\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"image/png;base64\",\n              children: \"image/png\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"image/jpeg;base64\",\n              children: \"image/jpeg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this), this.state.content_type === \"image/jpeg;base64\" || this.state.content_type === \"image/png;base64\" ? /*#__PURE__*/_jsxDEV(FileBase64, {\n            className: \"image-input\",\n            type: \"file\",\n            accept: \".png,.jpeg,.jpg\",\n            label: \"Content\",\n            value: this.state.content,\n            onDone: _ref4 => {\n              let {\n                base64\n              } = _ref4;\n              this.setState({\n                // base64 includes data:image/png;base64, before content. So split.\n                content: base64\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(TextField, {\n            className: \"text-input\",\n            size: \"medium\",\n            multiline: true,\n            type: \"text\",\n            fullWidth: true,\n            label: \"Content\",\n            value: this.state.content,\n            onChange: _ref5 => {\n              let {\n                target\n              } = _ref5;\n              return this.setState({\n                content: target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            className: \"text-input\",\n            type: \"text\",\n            label: \"Categories\",\n            fullWidth: true,\n            value: this.state.categories,\n            onChange: _ref6 => {\n              let {\n                target\n              } = _ref6;\n              return this.setState({\n                categories: target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Visibility\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            select: true,\n            fullWidth: true,\n            value: this.state.visibility,\n            label: \"Visibility\",\n            defaultValue: \"PUBLIC\",\n            onChange: _ref7 => {\n              let {\n                target\n              } = _ref7;\n              return this.setState({\n                visibility: target.value\n              });\n            },\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"PUBLIC\",\n              children: \"Public\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"FRIENDS\",\n              children: \"Friends\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            className: \"text-input\",\n            defaultValue: \"\",\n            size: \"small\",\n            type: \"text\",\n            fullWidth: true,\n            label: \"Post only to\",\n            value: this.state.viewableBy,\n            onChange: _ref8 => {\n              let {\n                target\n              } = _ref8;\n              return this.setState({\n                viewableBy: target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Unlisted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            value: this.state.unlisted,\n            label: \"Unlisted\",\n            onChange: () => this.setState({\n              unlisted: !this.state.unlisted\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: this.handleSubmit,\n            ref: node => this.btn = node,\n            children: \"Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), this.state.successful_post && /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/inbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 44\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default NewPost;","map":{"version":3,"sources":["/Users/victorlieu/Desktop/Development/404Project/frontend/src/components/Posts/NewPost.js"],"names":["React","Component","Button","TextField","MenuItem","FormControl","FormGroup","Grid","requests","Redirect","FileBase64","NewPost","constructor","props","state","title","description","content_type","content","categories","visibility","unlisted","successful_post","author_id","viewableBy","jwt","localStorage","getItem","getAuthorId","response","get","headers","Authorization","accept","setState","data","id","handleSubmit","defaults","url","post","author","contentType","type","sendToSelf","sendToFollowers","error","console","log","my_post","withCredentials","followerList","items","index","length","follower","render","width","target","value","base64","node","btn"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import './App.css';\nimport {\n  Button,\n  TextField,\n  MenuItem,\n  FormControl,\n  FormGroup,\n  Grid,\n} from \"@mui/material\";\nimport requests from \"../../requests\";\nimport { Redirect } from \"react-router-dom\";\nimport FileBase64 from \"react-file-base64\";\n// TODO: Add form validation\n//import { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\n\n// TODOS:\n// Form validation\n// print error messages\n\nclass NewPost extends Component {\n  constructor(props) {\n    super(props);\n    this.getAuthorId();\n  }\n\n  state = {\n    title: \"\",\n    description: \"\",\n    content_type: \"text/plain\",\n    content: \"\",\n    categories: \"\",\n    visibility: \"PUBLIC\",\n    unlisted: false,\n    successful_post: false,\n    author_id: \"\",\n    viewableBy: \"\",\n    jwt: localStorage.getItem(\"access_token\"),\n  };\n\n  getAuthorId = async () => {\n    const response = await requests.get(\"get-user/\", {\n      headers: {\n        Authorization: this.state.jwt,\n        accept: \"application/json\",\n      },\n    });\n    this.setState({\n      author_id: response.data.id ? response.data.id : \"\",\n    });\n  };\n\n  handleSubmit = async () => {\n    requests.defaults.headers[\"Authorization\"] = this.state.jwt;\n    try {\n      const url = \"authors/\" + this.state.author_id + \"/posts/\";\n      const response = await requests.post(url, {\n        headers: {\n          accept: \"application/json\",\n        },\n        title: this.state.title,\n        author: this.state.author_id,\n        contentType: this.state.content_type,\n        content: this.state.content,\n        description: this.state.description,\n        visibility: this.state.visibility,\n        unlisted: this.state.unlisted,\n        categories: this.state.categories,\n        viewableBy: this.state.viewableBy,\n      });\n      this.setState({ successful_post: true });\n      response.data.type = 'post'\n      if (!response.data.unlisted) {\n        this.sendToSelf(response.data)\n        this.sendToFollowers(response.data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  sendToSelf = async (my_post) => {\n    await requests.post(\n      `authors/${this.state.author_id}/inbox/`,\n      my_post,\n      {headers: {\n        Authorization: localStorage.getItem('access_token'),\n        accept: 'application/json',\n      }},\n      {withCredentials:true});\n  };\n\n  sendToFollowers = async (my_post) => {\n    // Get Followers\n    const response = await requests.get(\n      `authors/${my_post.author.id}/followers/`\n    );\n    const followerList = response.data.items;\n\n    // For each follower: send post to inbox\n    for (let index = 0; index < followerList.length; ++index) {\n      const follower = followerList[index];\n      await requests.post(\n        `authors/${follower.id}/inbox/`,\n        my_post,\n        {headers: {\n          Authorization: localStorage.getItem('access_token'),\n          accept: 'application/json',\n        }},\n        {withCredentials:true});\n    }\n  };\n\n  render() {\n    return (\n      <Grid container justifyContent=\"center\">\n        <FormControl\n          component=\"fieldset\"\n          variant=\"filled\"\n          disabled\n          style={{ width: \"35em\" }}\n        >\n          <h1>New Post</h1>\n          <FormGroup>\n            <TextField\n              className=\"text-input\"\n              size=\"small\"\n              type=\"text\"\n              fullWidth={true}\n              label=\"Title\"\n              value={this.state.title}\n              onChange={({ target }) =>\n                this.setState({\n                  title: target.value,\n                })\n              }\n            />\n            <br />\n            <TextField\n              className=\"text-input\"\n              size=\"small\"\n              type=\"text\"\n              fullWidth={true}\n              label=\"Description\"\n              value={this.state.description}\n              onChange={({ target }) =>\n                this.setState({\n                  description: target.value,\n                })\n              }\n            />\n            <br />\n            <TextField\n              select\n              value={this.state.content_type}\n              label=\"Content Type\"\n              fullWidth={true}\n              onChange={({ target }) =>\n                this.setState({\n                  content_type: target.value,\n                })\n              }\n            >\n              <MenuItem value=\"text/plain\">text/plain</MenuItem>\n              <MenuItem value=\"text/markdown\">text/markdown</MenuItem>\n              <MenuItem value=\"application/base64\">application/base64</MenuItem>\n              <MenuItem value=\"image/png;base64\">image/png</MenuItem>\n              <MenuItem value=\"image/jpeg;base64\">image/jpeg</MenuItem>\n            </TextField>\n            <br />\n            {this.state.content_type === \"image/jpeg;base64\" ||\n            this.state.content_type === \"image/png;base64\" ? (\n              <FileBase64\n                className=\"image-input\"\n                type=\"file\"\n                accept=\".png,.jpeg,.jpg\"\n                label=\"Content\"\n                value={this.state.content}\n                onDone={({ base64 }) => {\n                  this.setState({\n                    // base64 includes data:image/png;base64, before content. So split.\n                    content: base64,\n                  });\n                }}\n              />\n            ) : (\n              <TextField\n                className=\"text-input\"\n                size=\"medium\"\n                multiline={true}\n                type=\"text\"\n                fullWidth={true}\n                label=\"Content\"\n                value={this.state.content}\n                onChange={({ target }) =>\n                  this.setState({\n                    content: target.value,\n                  })\n                }\n              />\n            )}\n            <br />\n            <TextField\n              className=\"text-input\"\n              type=\"text\"\n              label=\"Categories\"\n              fullWidth={true}\n              value={this.state.categories}\n              onChange={({ target }) =>\n                this.setState({\n                  categories: target.value,\n                })\n              }\n            />\n            <br />\n            <p>Visibility</p>\n            <TextField\n              select\n              fullWidth={true}\n              value={this.state.visibility}\n              label=\"Visibility\"\n              defaultValue=\"PUBLIC\"\n              onChange={({ target }) =>\n                this.setState({\n                  visibility: target.value,\n                })\n              }\n            >\n              <MenuItem value=\"PUBLIC\">Public</MenuItem>\n              <MenuItem value=\"FRIENDS\">Friends</MenuItem>\n            </TextField>\n            <br />\n            <TextField\n              className=\"text-input\"\n              defaultValue=\"\"\n              size=\"small\"\n              type=\"text\"\n              fullWidth={true}\n              label=\"Post only to\"\n              value={this.state.viewableBy}\n              onChange={({ target }) =>\n                this.setState({\n                  viewableBy: target.value,\n                })\n              }\n            />\n            <br />\n            <p>Unlisted</p>\n            <input \n              type='checkbox'\n              value={this.state.unlisted}\n              label=\"Unlisted\"\n              onChange={() =>\n                this.setState({\n                  unlisted: !this.state.unlisted,\n                })\n              }\n            />\n            <br />\n            <Button\n              variant=\"contained\"\n              onClick={this.handleSubmit}\n              ref={(node) => (this.btn = node)}\n            >\n              Post\n            </Button>\n            {this.state.successful_post && <Redirect to=\"/inbox\" />}\n          </FormGroup>\n        </FormControl>\n      </Grid>\n    );\n  }\n}\n\nexport default NewPost;\n"]},"metadata":{},"sourceType":"module"}