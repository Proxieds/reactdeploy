{"ast":null,"code":"var _jsxFileName = \"/Users/victorlieu/Desktop/Development/404Project/frontend/src/components/Posts/PublicPosts.js\";\nimport React from \"react\";\nimport requests from \"../../requests\";\nimport { Grid } from \"@mui/material\";\nimport Post from \"../Inbox/Post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PublicPosts extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getAllPosts = async () => {\n      try {\n        // Get all the author details\n        const response = await requests.get(`service/authors/${this.state.currentUser.id}/posts/`, {\n          headers: {\n            Authorization: localStorage.getItem('access_token'),\n            accept: 'application/json'\n          }\n        });\n        this.setState({\n          allPosts: response.data.items\n        });\n        console.log(this.state.allPosts);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.initializeDetails = async () => {\n      try {\n        // Get the author details\n        const response = await requests.get('service/get-user/', {\n          headers: {\n            Authorization: localStorage.getItem('access_token'),\n            accept: 'application/json'\n          }\n        });\n        this.setState({\n          currentUser: {\n            id: response.data.id ? response.data.id : '',\n            url: response.data.url ? response.data.url : '',\n            host: response.data.host ? response.data.host : '',\n            displayName: response.data.displayName ? response.data.displayName : '',\n            github: response.data.github ? response.data.github : '',\n            profileImage: response.data.profileImage ? response.data.profileImage : ''\n          }\n        });\n        this.getAllPosts();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.state = {\n      currentUser: {},\n      allPosts: {}\n    };\n  }\n\n  componentDidMount() {\n    this.initializeDetails();\n  }\n\n  renderInboxItems() {\n    return this.state.allPosts.map(item => {\n      console.log('item', item);\n\n      if (item.type === 'post') {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 8,\n          children: /*#__PURE__*/_jsxDEV(Post, {\n            author: item.author,\n            title: item.title,\n            contentType: item.contentType,\n            content: item.content,\n            description: item.description,\n            post: {\n              id: item.id\n            },\n            currentUser: this.state.currentUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this);\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PublicPosts\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        p: 2,\n        justifyContent: \"center\",\n        alignItem: \"center\",\n        direction: \"column\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        justifyContent: \"center\",\n        alignItem: \"center\",\n        children: this.state.allPosts.length ? this.renderInboxItems() : /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Inbox is empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 69\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default PublicPosts;","map":{"version":3,"sources":["/Users/victorlieu/Desktop/Development/404Project/frontend/src/components/Posts/PublicPosts.js"],"names":["React","requests","Grid","Post","PublicPosts","Component","constructor","props","getAllPosts","response","get","state","currentUser","id","headers","Authorization","localStorage","getItem","accept","setState","allPosts","data","items","console","log","error","initializeDetails","url","host","displayName","github","profileImage","componentDidMount","renderInboxItems","map","item","type","author","title","contentType","content","description","render","length"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport requests from \"../../requests\";\nimport { Grid } from \"@mui/material\";\nimport Post from \"../Inbox/Post\";\n\n  \nclass PublicPosts extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        currentUser: {},\n        allPosts: {},\n    }\n}\n\n  componentDidMount() {\n      this.initializeDetails();\n  }\n\n  getAllPosts = async () => {\n    try {\n        // Get all the author details\n        const response = await requests.get(`service/authors/${this.state.currentUser.id}/posts/`, {headers: {\n            Authorization: localStorage.getItem('access_token'),\n            accept: 'application/json',\n        }});\n        this.setState({ allPosts: response.data.items });\n        console.log(this.state.allPosts)\n    } catch(error) {\n        console.log(error)\n    }\n  }\n\n  initializeDetails = async () => {\n      try {\n          // Get the author details\n          const response = await requests.get('service/get-user/', {headers: {\n              Authorization: localStorage.getItem('access_token'),\n              accept: 'application/json',\n          }});\n          this.setState({ currentUser: {\n              id: response.data.id ? response.data.id : '',\n              url: response.data.url ? response.data.url : '',\n              host: response.data.host ? response.data.host : '',\n              displayName: response.data.displayName ? response.data.displayName : '',\n              github: response.data.github ? response.data.github : '',\n              profileImage: response.data.profileImage ? response.data.profileImage : ''\n          }});\n\n        this.getAllPosts();\n\n      } catch(error) {\n          console.log(error)\n      }\n  }\n\n  renderInboxItems() {\n    return this.state.allPosts.map((item) => {\n        console.log('item', item)\n        if (item.type === 'post') {\n          return (\n            <Grid item xs={8}>\n              <Post author= {item.author}\n              title={item.title}\n              contentType={item.contentType}\n              content= {item.content}\n              description= {item.description}\n              post= {{id: item.id}}\n              currentUser={this.state.currentUser}\n              />\n            </Grid>\n          );\n        }\n    });\n  }\n\n  render(){\n      return (\n          <div className=\"PublicPosts\">\n            <Grid container p={2}\n            justifyContent=\"center\"\n            alignItem=\"center\"\n            direction=\"column\">\n            </Grid>\n          <Grid container spacing={2} justifyContent=\"center\" alignItem=\"center\">\n            {this.state.allPosts.length ? this.renderInboxItems() : <h2>Inbox is empty</h2>}\n          </Grid>\n          </div>\n      )\n  }\n}\n\nexport default PublicPosts;\n"]},"metadata":{},"sourceType":"module"}