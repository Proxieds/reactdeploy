{"ast":null,"code":"// /*Code taken from: https://mui.com/components/app-bar/#ResponsiveAppBar.js and modified*/\n// import * as React from 'react';\n// import AppBar from '@mui/material/AppBar';\n// import Box from '@mui/material/Box';\n// import Toolbar from '@mui/material/Toolbar';\n// import IconButton from '@mui/material/IconButton';\n// import Typography from '@mui/material/Typography';\n// import Menu from '@mui/material/Menu';\n// import MenuIcon from '@mui/icons-material/Menu';\n// import Container from '@mui/material/Container';\n// import Avatar from '@mui/material/Avatar';\n// import Button from '@mui/material/Button';\n// import Tooltip from '@mui/material/Tooltip';\n// import MenuItem from '@mui/material/MenuItem';\n// import {Link, useHistory} from \"react-router-dom\";\n// import {useLocation} from 'react-router-dom';\n// import \"./NavBar.css\"\n// import requests from '../requests';\n// const pages = ['Home', 'Friends', 'My Profile', 'Post', 'Public Posts'];\n// const settings = ['Profile Settings', 'Logout'];\n// const links = {\"Home\": \"./inbox\", \"Friends\": \"./friends\", \"My Profile\": \"./profile\", \"Post\": \"./post\", \"Public Posts\": \"./public_posts\"}\n// requests.defaults.headers[\"Authorization\"] = localStorage.getItem('access_token');\n// const NavBar = () => {\n//   const history = useHistory();\n//   const currentPath = \".\" + useLocation()[\"pathname\"];\n//   const [anchorElNav, setAnchorElNav] = React.useState(null);\n//   const [anchorElUser, setAnchorElUser] = React.useState(null);\n//   React.useState(function checkAuthenticated() {\n//     // TODO check and simplify this to for expired accessToken\n//     const accessToken = localStorage.getItem(\"access_token\");\n//     if (!accessToken) {\n//         history.push(\"/\");\n//         history.go(0);\n//     }\n//     // const response = requests.get('service/get-user/', {headers: {\n//     //   accept: 'application/json',\n//     // }}).then(data => {\n//     //   if (data.status != 200) {\n//     //     history.push(\"/\");\n//     //   }\n//     // }\n//     // );\n//     // if (!accessToken || status_code != 200) {\n//     //   console.log(status_code);\n//     //   console.log(\"HERE\");\n//     //   history.push(\"/\");\n//     // }\n//   });\n//   const handleOpenNavMenu = (event) => {\n//     setAnchorElNav(event.currentTarget);\n//   };\n//   const handleOpenUserMenu = (event) => {\n//     setAnchorElUser(event.currentTarget);\n//   };\n//   const handleCloseNavMenu = () => {\n//     setAnchorElNav(null);\n//   };\n//   const logout = async () => {\n//     // send POST request to /service/logout\n//     try {\n//       const response = await requests.post('service/logout/', {headers: {\n//         accept: 'application/json',\n//       }});\n//     } \n//     catch(error) {\n//       console.log(error);\n//     }\n//     localStorage.removeItem(\"access_token\");\n//     history.push(\"/\")\n//   }\n//   const handleCloseUserMenu = (e) => {\n//     // Handles the selected option\n//     let selectedOption = e.currentTarget.innerText\n//     switch(selectedOption) {\n//       case \"Profile Settings\":\n//         history.push('/profile');\n//         break;\n//       case \"Logout\":\n//         logout();\n//         break;\n//     }\n//     setAnchorElUser(null);\n//   };\n//   /* todo\n//     -move nav bar options to left\n//   */\n//   return (\n//     <AppBar position=\"static\" >\n//       <Container maxWidth=\"100%\" >\n//         <Toolbar disableGutters>\n//           {/* NOTE: un-comment this out if we need a logo in the nav bar\n//           <Typography\n//             variant=\"h6\"\n//             noWrap\n//             component=\"div\"\n//             sx={{ mr: 2, display: { xs: 'none', md: 'flex' } }}\n//           >\n//             LOGO\n//           </Typography>\n//           */}\n//           <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\n//             <IconButton\n//               size=\"large\"\n//               aria-label=\"account of current user\"\n//               aria-controls=\"menu-appbar\"\n//               aria-haspopup=\"true\"\n//               onClick={handleOpenNavMenu}\n//               color=\"inherit\"\n//             >\n//               <MenuIcon />\n//             </IconButton>\n//             <Menu\n//               id=\"menu-appbar\"\n//               anchorEl={anchorElNav}\n//               anchorOrigin={{\n//                 vertical: 'bottom',\n//                 horizontal: 'left',\n//               }}\n//               keepMounted\n//               transformOrigin={{\n//                 vertical: 'top',\n//                 horizontal: 'left',\n//               }}\n//               open={Boolean(anchorElNav)}\n//               onClose={handleCloseNavMenu}\n//               sx={{\n//                 display: { xs: 'block', md: 'none' },\n//               }}\n//             >\n//               {pages.map((page) => (\n//                 <Link className=\"navLink\" to={links[page]}>\n//                 <MenuItem key={page} onClick={handleCloseNavMenu}>\n//                   <Typography \n//                     textAlign=\"center\" \n//                     sx={links[page] === currentPath ? {my: 2, color: \"black\", display: 'block', fontWeight: \"bold\"} : {my: 2, color: \"rgba(0, 0, 0, 0.5)\", display: 'block'}}\n//                   >\n//                     {page}\n//                   </Typography>\n//                 </MenuItem>\n//                 </Link>\n//               ))}\n//             </Menu>\n//           </Box>\n//           {/* NOTE: un-comment this out if we need a logo in the nav bar\n//           <Typography\n//             variant=\"h6\"\n//             noWrap\n//             component=\"div\"\n//             sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}\n//           >\n//             LOGO\n//           </Typography>\n//           */}\n//           <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' }, }}>\n//             {pages.map((page) => (\n//               <Link className=\"navLink\" to={links[page]}>\n//                 <Button \n//                   key={page}\n//                   onClick={handleCloseNavMenu}\n//                   sx={links[page] === currentPath ? {my: 2, color: \"white\", display: 'block', fontWeight: \"bold\"} : {my: 2, color: \"rgba(255, 255, 255, 0.5)\", display: 'block'}}\n//                 >\n//                   {page}\n//                 </Button>\n//               </Link>\n//             ))}\n//           </Box>\n//           <Box sx={{ flexGrow: 0 }}>\n//             <Tooltip title=\"Open settings\">\n//               <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\n//                 <Avatar alt=\"user\" src=\"\" />\n//               </IconButton>\n//             </Tooltip>\n//             <Menu\n//               sx={{ mt: '45px' }}\n//               id=\"menu-appbar\"\n//               anchorEl={anchorElUser}\n//               anchorOrigin={{\n//                 vertical: 'top',\n//                 horizontal: 'right',\n//               }}\n//               keepMounted\n//               transformOrigin={{\n//                 vertical: 'top',\n//                 horizontal: 'right',\n//               }}\n//               open={Boolean(anchorElUser)}\n//               onClose={handleCloseUserMenu}\n//             >\n//               {settings.map((setting) => (\n//                 <MenuItem key={setting} onClick={handleCloseUserMenu}>\n//                   <Typography textAlign=\"center\">{setting}</Typography>\n//                 </MenuItem>\n//               ))}\n//             </Menu>\n//           </Box>\n//         </Toolbar>\n//       </Container>\n//     </AppBar>\n//   );\n// };\n// export default NavBar;","map":{"version":3,"sources":["/Users/victorlieu/Desktop/Development/404Project/frontend/src/components/NavBar.js"],"names":[],"mappings":"AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// /*Code taken from: https://mui.com/components/app-bar/#ResponsiveAppBar.js and modified*/\n\n\n// import * as React from 'react';\n// import AppBar from '@mui/material/AppBar';\n// import Box from '@mui/material/Box';\n// import Toolbar from '@mui/material/Toolbar';\n// import IconButton from '@mui/material/IconButton';\n// import Typography from '@mui/material/Typography';\n// import Menu from '@mui/material/Menu';\n// import MenuIcon from '@mui/icons-material/Menu';\n// import Container from '@mui/material/Container';\n// import Avatar from '@mui/material/Avatar';\n// import Button from '@mui/material/Button';\n// import Tooltip from '@mui/material/Tooltip';\n// import MenuItem from '@mui/material/MenuItem';\n// import {Link, useHistory} from \"react-router-dom\";\n// import {useLocation} from 'react-router-dom';\n// import \"./NavBar.css\"\n// import requests from '../requests';\n\n\n// const pages = ['Home', 'Friends', 'My Profile', 'Post', 'Public Posts'];\n// const settings = ['Profile Settings', 'Logout'];\n// const links = {\"Home\": \"./inbox\", \"Friends\": \"./friends\", \"My Profile\": \"./profile\", \"Post\": \"./post\", \"Public Posts\": \"./public_posts\"}\n// requests.defaults.headers[\"Authorization\"] = localStorage.getItem('access_token');\n\n// const NavBar = () => {\n//   const history = useHistory();\n//   const currentPath = \".\" + useLocation()[\"pathname\"];\n//   const [anchorElNav, setAnchorElNav] = React.useState(null);\n//   const [anchorElUser, setAnchorElUser] = React.useState(null);\n  \n//   React.useState(function checkAuthenticated() {\n//     // TODO check and simplify this to for expired accessToken\n//     const accessToken = localStorage.getItem(\"access_token\");\n//     if (!accessToken) {\n//         history.push(\"/\");\n//         history.go(0);\n//     }\n//     // const response = requests.get('service/get-user/', {headers: {\n//     //   accept: 'application/json',\n//     // }}).then(data => {\n//     //   if (data.status != 200) {\n//     //     history.push(\"/\");\n//     //   }\n//     // }\n//     // );\n//     // if (!accessToken || status_code != 200) {\n//     //   console.log(status_code);\n//     //   console.log(\"HERE\");\n//     //   history.push(\"/\");\n//     // }\n//   });\n\n//   const handleOpenNavMenu = (event) => {\n//     setAnchorElNav(event.currentTarget);\n//   };\n//   const handleOpenUserMenu = (event) => {\n//     setAnchorElUser(event.currentTarget);\n//   };\n\n//   const handleCloseNavMenu = () => {\n//     setAnchorElNav(null);\n//   };\n\n//   const logout = async () => {\n//     // send POST request to /service/logout\n//     try {\n//       const response = await requests.post('service/logout/', {headers: {\n//         accept: 'application/json',\n//       }});\n//     } \n//     catch(error) {\n//       console.log(error);\n//     }\n//     localStorage.removeItem(\"access_token\");\n//     history.push(\"/\")\n//   }\n\n//   const handleCloseUserMenu = (e) => {\n//     // Handles the selected option\n//     let selectedOption = e.currentTarget.innerText\n//     switch(selectedOption) {\n//       case \"Profile Settings\":\n//         history.push('/profile');\n//         break;\n//       case \"Logout\":\n//         logout();\n//         break;\n//     }\n//     setAnchorElUser(null);\n//   };\n\n\n//   /* todo\n//     -move nav bar options to left\n\n//   */\n\n//   return (\n//     <AppBar position=\"static\" >\n//       <Container maxWidth=\"100%\" >\n//         <Toolbar disableGutters>\n//           {/* NOTE: un-comment this out if we need a logo in the nav bar\n\n//           <Typography\n//             variant=\"h6\"\n//             noWrap\n//             component=\"div\"\n//             sx={{ mr: 2, display: { xs: 'none', md: 'flex' } }}\n//           >\n//             LOGO\n//           </Typography>\n          \n//           */}\n\n//           <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\n//             <IconButton\n//               size=\"large\"\n//               aria-label=\"account of current user\"\n//               aria-controls=\"menu-appbar\"\n//               aria-haspopup=\"true\"\n//               onClick={handleOpenNavMenu}\n//               color=\"inherit\"\n//             >\n//               <MenuIcon />\n//             </IconButton>\n//             <Menu\n//               id=\"menu-appbar\"\n//               anchorEl={anchorElNav}\n//               anchorOrigin={{\n//                 vertical: 'bottom',\n//                 horizontal: 'left',\n//               }}\n//               keepMounted\n//               transformOrigin={{\n//                 vertical: 'top',\n//                 horizontal: 'left',\n//               }}\n//               open={Boolean(anchorElNav)}\n//               onClose={handleCloseNavMenu}\n//               sx={{\n//                 display: { xs: 'block', md: 'none' },\n//               }}\n//             >\n//               {pages.map((page) => (\n//                 <Link className=\"navLink\" to={links[page]}>\n//                 <MenuItem key={page} onClick={handleCloseNavMenu}>\n//                   <Typography \n//                     textAlign=\"center\" \n//                     sx={links[page] === currentPath ? {my: 2, color: \"black\", display: 'block', fontWeight: \"bold\"} : {my: 2, color: \"rgba(0, 0, 0, 0.5)\", display: 'block'}}\n//                   >\n//                     {page}\n//                   </Typography>\n//                 </MenuItem>\n//                 </Link>\n//               ))}\n//             </Menu>\n//           </Box>\n//           {/* NOTE: un-comment this out if we need a logo in the nav bar\n//           <Typography\n//             variant=\"h6\"\n//             noWrap\n//             component=\"div\"\n//             sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}\n//           >\n//             LOGO\n//           </Typography>\n//           */}\n//           <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' }, }}>\n//             {pages.map((page) => (\n//               <Link className=\"navLink\" to={links[page]}>\n//                 <Button \n//                   key={page}\n//                   onClick={handleCloseNavMenu}\n//                   sx={links[page] === currentPath ? {my: 2, color: \"white\", display: 'block', fontWeight: \"bold\"} : {my: 2, color: \"rgba(255, 255, 255, 0.5)\", display: 'block'}}\n//                 >\n//                   {page}\n//                 </Button>\n//               </Link>\n//             ))}\n//           </Box>\n\n//           <Box sx={{ flexGrow: 0 }}>\n//             <Tooltip title=\"Open settings\">\n//               <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\n//                 <Avatar alt=\"user\" src=\"\" />\n//               </IconButton>\n//             </Tooltip>\n//             <Menu\n//               sx={{ mt: '45px' }}\n//               id=\"menu-appbar\"\n//               anchorEl={anchorElUser}\n//               anchorOrigin={{\n//                 vertical: 'top',\n//                 horizontal: 'right',\n//               }}\n//               keepMounted\n//               transformOrigin={{\n//                 vertical: 'top',\n//                 horizontal: 'right',\n//               }}\n//               open={Boolean(anchorElUser)}\n//               onClose={handleCloseUserMenu}\n//             >\n//               {settings.map((setting) => (\n//                 <MenuItem key={setting} onClick={handleCloseUserMenu}>\n//                   <Typography textAlign=\"center\">{setting}</Typography>\n//                 </MenuItem>\n//               ))}\n//             </Menu>\n//           </Box>\n//         </Toolbar>\n//       </Container>\n//     </AppBar>\n//   );\n// };\n// export default NavBar;\n"]},"metadata":{},"sourceType":"module"}