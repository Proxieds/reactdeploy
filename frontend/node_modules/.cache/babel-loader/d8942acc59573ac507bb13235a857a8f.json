{"ast":null,"code":"var _jsxFileName = \"/Users/victorlieu/Desktop/Development/reactdeploy/frontend/src/components/Inbox/Inbox.js\";\nimport React from \"react\";\nimport requests from \"../../requests\";\nimport { Alert, Button, List, Grid, Box, TextField, Stack, ListItemText } from \"@mui/material\";\nimport FollowRequest from \"../Followers/FollowRequest\";\nimport LikeNotification from \"./LikeNotification\";\nimport CommentNotification from \"./CommentNotification\";\nimport Post from \"./Post\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Inbox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initializeDetails = async () => {\n      try {\n        // Get the author details\n        const response = await requests.get('get-user/', {\n          headers: {\n            Authorization: localStorage.getItem('access_token'),\n            accept: 'application/json'\n          }\n        });\n        this.setState({\n          currentUser: {\n            id: response.data.id ? response.data.id : '',\n            url: response.data.url ? response.data.url : '',\n            host: response.data.host ? response.data.host : '',\n            displayName: response.data.displayName ? response.data.displayName : '',\n            github: response.data.github ? response.data.github : '',\n            profileImage: response.data.profileImage ? response.data.profileImage : ''\n          }\n        });\n        const response_inbox = await requests.get(`authors/${this.state.currentUser.id}/inbox/`, {\n          headers: {\n            Authorization: localStorage.getItem('access_token'),\n            accept: 'application/json'\n          }\n        }, {\n          withCredentials: true\n        }); // get list of likes for each post\n\n        const inboxPromises = response_inbox.data.items.map(async item => {\n          if (item.type === 'post') {\n            const response = await requests.get(`authors/${item.author.id}/posts/${item.id}/likes/`);\n            item.likes = response.data.items;\n            item.likedByCurrent = false; // check if current viewer liked the post\n\n            item.likes.forEach(like => {\n              if (like.author === this.state.currentUser.id) {\n                item.likedByCurrent = true;\n              }\n            });\n          }\n\n          return item;\n        }); // wait for promises then set inbox list\n\n        const inboxList = await Promise.all(inboxPromises);\n        this.setState({\n          inboxList: inboxList\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.clearInbox = async () => {\n      try {\n        await requests.delete(`authors/${this.state.currentUser.id}/inbox/`, {\n          headers: {\n            Authorization: localStorage.getItem('access_token'),\n            accept: 'application/json'\n          }\n        }, {\n          withCredentials: true\n        });\n        this.setState({\n          inboxList: []\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.state = {\n      currentUser: {},\n      inboxList: []\n    };\n  }\n\n  componentDidMount() {\n    this.initializeDetails();\n  }\n\n  renderInboxItems() {\n    return this.state.inboxList.map(item => {\n      if (item.type === 'post') {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 8,\n          children: /*#__PURE__*/_jsxDEV(Post, {\n            post: item,\n            currentUser: this.state.currentUser,\n            likes: item.likes,\n            likedByCurrent: item.likedByCurrent,\n            isPublic: item.visibility === 'PUBLIC' && item.viewableBy === ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this);\n      } else if (item.type === 'Follow') {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 8,\n          children: /*#__PURE__*/_jsxDEV(FollowRequest, {\n            displayName: item.actor.displayName,\n            profileImage: item.actor.profileImage,\n            currentUserId: this.state.currentUser.id,\n            id: item.actor.id,\n            accepted: item.accepted\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this);\n      } else if (item.type === 'Like') {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 8,\n          children: /*#__PURE__*/_jsxDEV(LikeNotification, {\n            summary: item.summary,\n            profileImage: item.author.profileImage,\n            object: item.object\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this);\n      } else if (item.type === 'comment') {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 8,\n          children: /*#__PURE__*/_jsxDEV(CommentNotification, {\n            profileImage: item.author.profileImage,\n            displayName: item.author.displayName,\n            owned: item.author.id === this.state.currentUser.id,\n            id: item.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this);\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inbox\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        p: 2,\n        justifyContent: \"center\",\n        alignItem: \"center\",\n        direction: \"column\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 26\n          }, this),\n          onClick: this.clearInbox,\n          children: \"Clear inbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        justifyContent: \"center\",\n        alignItem: \"center\",\n        children: this.state.inboxList.length ? this.renderInboxItems() : /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Inbox is empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 70\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default Inbox;","map":{"version":3,"sources":["/Users/victorlieu/Desktop/Development/reactdeploy/frontend/src/components/Inbox/Inbox.js"],"names":["React","requests","Alert","Button","List","Grid","Box","TextField","Stack","ListItemText","FollowRequest","LikeNotification","CommentNotification","Post","DeleteIcon","Inbox","Component","constructor","props","initializeDetails","response","get","headers","Authorization","localStorage","getItem","accept","setState","currentUser","id","data","url","host","displayName","github","profileImage","response_inbox","state","withCredentials","inboxPromises","items","map","item","type","author","likes","likedByCurrent","forEach","like","inboxList","Promise","all","error","console","log","clearInbox","delete","componentDidMount","renderInboxItems","visibility","viewableBy","actor","accepted","summary","object","render","length"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport requests from \"../../requests\";\nimport { Alert, Button, List, Grid, Box, TextField, Stack, ListItemText } from \"@mui/material\";\nimport FollowRequest from \"../Followers/FollowRequest\";\nimport LikeNotification from \"./LikeNotification\";\nimport CommentNotification from \"./CommentNotification\";\nimport Post from \"./Post\";\nimport DeleteIcon from '@mui/icons-material/Delete';\n\n  \nclass Inbox extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        currentUser: {},\n        inboxList: [],\n    }\n}\n\n  componentDidMount() {\n      this.initializeDetails();\n  }\n\n  initializeDetails = async () => {\n      try {\n          // Get the author details\n          const response = await requests.get('get-user/', {headers: {\n              Authorization: localStorage.getItem('access_token'),\n              accept: 'application/json',\n          }});\n\n          this.setState({ currentUser: {\n            id: response.data.id ? response.data.id : '',\n            url: response.data.url ? response.data.url : '',\n            host: response.data.host ? response.data.host : '',\n            displayName: response.data.displayName ? response.data.displayName : '',\n            github: response.data.github ? response.data.github : '',\n            profileImage: response.data.profileImage ? response.data.profileImage : ''\n          }});\n\n          const response_inbox = await requests.get(`authors/${this.state.currentUser.id}/inbox/`,\n            {headers: {\n              Authorization: localStorage.getItem('access_token'),\n              accept: 'application/json',\n              }},\n              {withCredentials:true})\n\n\n          // get list of likes for each post\n          const inboxPromises = response_inbox.data.items.map(async (item) => {\n            if (item.type === 'post') {\n              const response = await requests.get(`authors/${item.author.id}/posts/${item.id}/likes/`);\n              item.likes = response.data.items;\n              item.likedByCurrent = false;\n              // check if current viewer liked the post\n              item.likes.forEach((like) => {\n                if (like.author === this.state.currentUser.id) {\n                  item.likedByCurrent = true;\n                }\n              })\n            }\n            return item;\n          })\n          // wait for promises then set inbox list\n          const inboxList = await Promise.all(inboxPromises)\n          this.setState({inboxList: inboxList})\n      } catch(error) {\n          console.log(error)\n      }\n  }\n\n  clearInbox = async () => {\n    try {\n      await requests.delete(`authors/${this.state.currentUser.id}/inbox/`,\n            {headers: {\n              Authorization: localStorage.getItem('access_token'),\n              accept: 'application/json',\n              }},\n              {withCredentials:true})\n      this.setState({inboxList: []})\n    } catch(error) {\n        console.log(error)\n    }\n  }\n\n  renderInboxItems() {\n    return this.state.inboxList.map((item) => {\n        if (item.type === 'post') {\n          return (\n            <Grid item xs={8}>\n              <Post\n              post= {item}\n              currentUser={this.state.currentUser}\n              likes={item.likes}\n              likedByCurrent={item.likedByCurrent}\n              isPublic={item.visibility === 'PUBLIC' && item.viewableBy === ''}\n              />\n            </Grid>\n          );\n        } else if (item.type === 'Follow') {\n          return (\n            <Grid item xs={8}>\n            <FollowRequest\n                displayName={item.actor.displayName}\n                profileImage={item.actor.profileImage}\n                currentUserId={this.state.currentUser.id}\n                id={item.actor.id}\n                accepted={item.accepted}\n            />\n            </Grid>\n          );\n        } else if (item.type === 'Like') {\n          return (\n            <Grid item xs={8}>\n            <LikeNotification\n              summary={item.summary}\n              profileImage={item.author.profileImage}\n              object={item.object}\n            />\n            </Grid>\n          );\n        } else if (item.type === 'comment') {\n          return (\n          <Grid item xs={8}>\n            <CommentNotification\n              profileImage={item.author.profileImage}\n              displayName={item.author.displayName}\n              owned={item.author.id === this.state.currentUser.id}\n              id={item.id}\n            />\n            </Grid>);\n        }\n    });\n  }\n\n  render(){\n      return (\n          <div className=\"inbox\">\n            <Grid container p={2}\n            justifyContent=\"center\"\n            alignItem=\"center\"\n            direction=\"column\">\n              <Button \n              variant=\"outlined\"\n              startIcon={<DeleteIcon />}\n              onClick={this.clearInbox}>\n                Clear inbox\n              </Button>\n            </Grid>\n          <Grid container spacing={2} justifyContent=\"center\" alignItem=\"center\">\n            {this.state.inboxList.length ? this.renderInboxItems() : <h2>Inbox is empty</h2>}\n          </Grid>\n          </div>\n      )\n  }\n}\n\nexport default Inbox;\n"]},"metadata":{},"sourceType":"module"}