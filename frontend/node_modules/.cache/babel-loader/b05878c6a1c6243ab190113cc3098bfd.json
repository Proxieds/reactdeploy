{"ast":null,"code":"var _jsxFileName = \"/Users/victorlieu/Desktop/Development/404Project/frontend/src/components/Inbox/Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport requests from \"../../requests\";\nimport CommentDialogButton from \"../Posts/CommentDialog\";\nimport './Post.css';\nimport { Alert, Avatar, Button, ListItem, ListItemAvatar, ListItemText, ListItemSecondaryAction, ImageListItem, TextField } from \"@mui/material\";\nimport ReactMarkdown from 'react-markdown';\nimport ThumbUp from '@mui/icons-material/ThumbUp';\nimport Send from '@mui/icons-material/Send'; // assuming props contains all the post attributes\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Post(props) {\n  _s();\n\n  const [error, setError] = useState(\"\");\n  const [commentText, setCommentText] = useState(\"\");\n\n  const styles = theme => ({\n    listItemText: {\n      fontSize: '1'\n    }\n  });\n\n  const like = async () => {\n    // send POST request to authors/{authorId}/inbox/ with a like\n    console.log('clicked like');\n\n    try {\n      const data = {\n        summary: `${props.currentUser.displayName} likes your post.`,\n        type: \"Like\",\n        author: props.currentUser.id,\n        _object: `${props.author.id}/posts/${props.post.id}`\n      };\n      const response = await requests.post(`service/authors/${props.author.id}/inbox/`, data, {\n        headers: {\n          Authorization: localStorage.getItem('access_token'),\n          accept: 'application/json'\n        }\n      }, {\n        withCredentials: true\n      }); // change summary of like, to send like to your own inbox\n\n      data.summary = `You liked ${props.author.displayName}'s post.`;\n      sendToSelf(data);\n    } catch (e) {\n      console.log(e);\n      setError(\"Failed to send like.\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n      id: \"title\",\n      primaryTypographyProps: {\n        fontSize: '30px'\n      },\n      primary: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n      id: \"author\",\n      primary: \"By: \" + props.author.displayName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), props.contentType == \"text/markdown\" && /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n      children: props.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 50\n    }, this), props.contentType == \"text/plain\" && /*#__PURE__*/_jsxDEV(ListItemText, {\n      primary: props.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 49\n    }, this), (props.contentType == \"application/base64\" || props.contentType == \"image/png;base64\" || props.contentType == \"image/jpeg;base64\") && /*#__PURE__*/_jsxDEV(ImageListItem, {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: props.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 144\n    }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n      id: \"description\",\n      primary: props.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"comment-like-section\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        id: \"like-button\",\n        startIcon: /*#__PURE__*/_jsxDEV(ThumbUp, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 24\n        }, this),\n        onClick: like,\n        children: \"Like\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"comment-section\",\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          id: \"commentBox\",\n          label: \"Comment\",\n          variant: \"filled\",\n          defaultValue: \"\",\n          onChange: e => {\n            setCommentText(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          id: \"comment-button\",\n          startIcon: /*#__PURE__*/_jsxDEV(Send, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 28\n          }, this),\n          onClick: comment,\n          children: \"Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: props.post.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(CommentDialogButton, {\n          current_author: props.currentUser.id,\n          post_id: props.post.id,\n          author_id: props.author.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Post, \"YyDkyjg9bad9N0eGWj3kc156sGY=\");\n\n_c = Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/victorlieu/Desktop/Development/404Project/frontend/src/components/Inbox/Post.js"],"names":["React","useState","requests","CommentDialogButton","Alert","Avatar","Button","ListItem","ListItemAvatar","ListItemText","ListItemSecondaryAction","ImageListItem","TextField","ReactMarkdown","ThumbUp","Send","Post","props","error","setError","commentText","setCommentText","styles","theme","listItemText","fontSize","like","console","log","data","summary","currentUser","displayName","type","author","id","_object","post","response","headers","Authorization","localStorage","getItem","accept","withCredentials","sendToSelf","e","title","contentType","content","description","target","value","comment"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport requests from \"../../requests\";\nimport CommentDialogButton from \"../Posts/CommentDialog\";\nimport './Post.css'\n\nimport { Alert,\n        Avatar,\n        Button,\n        ListItem,\n        ListItemAvatar,\n        ListItemText,\n        ListItemSecondaryAction,\n        ImageListItem,\n        TextField,\n        } from \"@mui/material\";\nimport ReactMarkdown from 'react-markdown'\nimport ThumbUp from '@mui/icons-material/ThumbUp'\nimport Send from '@mui/icons-material/Send'\n\n// assuming props contains all the post attributes\nexport default function Post(props) {\n    const [error, setError] = useState(\"\");\n    const [commentText, setCommentText] = useState(\"\")\n\n    const styles = theme => ({\n        listItemText:{\n          fontSize: '1',\n        }\n      });\n\n    const like = async () => {\n        // send POST request to authors/{authorId}/inbox/ with a like\n        console.log('clicked like');\n        try {\n          const data = {\n            summary: `${props.currentUser.displayName} likes your post.`,\n            type: \"Like\",\n            author: props.currentUser.id,\n            _object: `${props.author.id}/posts/${props.post.id}`\n          }\n\n          const response = await requests.post(`service/authors/${props.author.id}/inbox/`,\n            data,\n            {headers: {\n              Authorization: localStorage.getItem('access_token'),\n              accept: 'application/json',\n            }},\n            {withCredentials: true});\n          \n          // change summary of like, to send like to your own inbox\n          data.summary = `You liked ${props.author.displayName}'s post.`\n          sendToSelf(data);\n        } catch (e) {\n          console.log(e)\n          setError(\"Failed to send like.\");\n        }   \n    }\n\n    return (\n      <ListItem>\n        <ListItemText\n          id=\"title\"\n          primaryTypographyProps={{fontSize: '30px'}}\n          primary={props.title}\n        />\n        <ListItemText\n          id=\"author\"\n          primary={\"By: \" + props.author.displayName}\n        />\n        {props.contentType == \"text/markdown\" && <ReactMarkdown>\n          {props.content}\n          </ReactMarkdown>}\n        {(props.contentType == \"text/plain\") && <ListItemText\n          primary={props.content}\n        />}\n        {(props.contentType == \"application/base64\" || props.contentType == \"image/png;base64\" || props.contentType == \"image/jpeg;base64\") && <ImageListItem\n          children={<img src={props.content}></img>}\n        />}\n        <ListItemText\n          id=\"description\"\n          primary={props.description}\n        />\n        <div id=\"comment-like-section\">\n            <Button \n            id=\"like-button\"\n            startIcon={<ThumbUp />}\n            onClick={like}>\n                Like\n            </Button>\n            <span id=\"comment-section\">\n                <TextField id=\"commentBox\" label=\"Comment\" variant=\"filled\" defaultValue=\"\" onChange={e => {setCommentText(e.target.value)}}/>\n                <Button\n                id=\"comment-button\" \n                startIcon={<Send />}\n                onClick={comment}>\n                    Comment\n                </Button>\n                <p>{props.post.id}</p>\n                <CommentDialogButton\n                current_author = {props.currentUser.id}\n                post_id = {props.post.id}\n                author_id = {props.author.id}/>\n            </span>\n        </div>\n      </ListItem>\n    );\n}"]},"metadata":{},"sourceType":"module"}