{"ast":null,"code":"var _jsxFileName = \"/Users/victorlieu/Desktop/Development/404Project/frontend/src/components/Posts/NewPost.js\";\nimport React, { Component } from \"react\"; // import './App.css';\n\nimport { Button, TextField, Select, MenuItem } from \"@mui/material\";\nimport \"../../styles/new-post.css\";\nimport requests from \"../../requests\";\nimport { Redirect } from \"react-router-dom\"; // TODO: Add form validation\n//import { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewPost extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      description: \"\",\n      content: \"\",\n      categories: \"\",\n      visibility: \"\",\n      successful_post: false,\n      author_id: \"\",\n      jwt: localStorage.getItem(\"access_token\")\n    };\n\n    this.getAuthorId = async () => {\n      const response = await requests.get(\"service/get-user/\", {\n        headers: {\n          Authorization: this.state.jwt,\n          accept: \"application/json\"\n        }\n      });\n      this.setState({\n        author_id: response.data.id ? response.data.id : \"\"\n      });\n    };\n\n    this.handleSubmit = async () => {\n      console.log(this.state);\n      requests.defaults.headers['Authorization'] = this.state.jwt;\n\n      try {\n        const url = \"service/authors/\" + this.state.author_id + \"/posts/\";\n        const response = await requests.post(url, {\n          headers: {\n            accept: \"application/json\"\n          },\n          title: this.state.title,\n          author: this.state.author_id,\n          contentType: \"text/plain\",\n          content: this.state.content,\n          description: this.state.description,\n          visibility: this.state.visibility,\n          categories: this.state.categories\n        });\n        console.log(response.data);\n        this.setState({\n          successful_post: true\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getAuthorId();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"New Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            className: \"text-input\",\n            size: \"small\",\n            type: \"text\",\n            fullWidth: true,\n            label: \"Title\",\n            value: this.state.title,\n            onChange: _ref => {\n              let {\n                target\n              } = _ref;\n              return this.setState({\n                title: target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            className: \"text-input\",\n            size: \"small\",\n            type: \"text\",\n            fullWidth: true,\n            label: \"Description\",\n            value: this.state.description,\n            onChange: _ref2 => {\n              let {\n                target\n              } = _ref2;\n              return this.setState({\n                description: target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            className: \"text-input\",\n            size: \"medium\",\n            multiline: true,\n            type: \"text\",\n            fullWidth: true,\n            label: \"Content\",\n            value: this.state.content,\n            onChange: _ref3 => {\n              let {\n                target\n              } = _ref3;\n              return this.setState({\n                content: target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            className: \"text-input\",\n            type: \"text\",\n            label: \"Categories\",\n            fullWidth: true,\n            value: this.state.categories,\n            onChange: _ref4 => {\n              let {\n                target\n              } = _ref4;\n              return this.setState({\n                categories: target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Visibility\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: this.state.visibility,\n            label: \"Visibility\",\n            defaultValue: \"PUBLIC\",\n            onChange: _ref5 => {\n              let {\n                target\n              } = _ref5;\n              return this.setState({\n                visibility: target.value\n              });\n            },\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"PUBLIC\",\n              children: \"Public\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"FRIENDS\",\n              children: \"Friends\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: this.handleSubmit,\n            ref: node => this.btn = node,\n            children: \"Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), this.state.successful_post && /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/inbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 44\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default NewPost;","map":{"version":3,"sources":["/Users/victorlieu/Desktop/Development/404Project/frontend/src/components/Posts/NewPost.js"],"names":["React","Component","Button","TextField","Select","MenuItem","requests","Redirect","NewPost","constructor","props","state","title","description","content","categories","visibility","successful_post","author_id","jwt","localStorage","getItem","getAuthorId","response","get","headers","Authorization","accept","setState","data","id","handleSubmit","console","log","defaults","url","post","author","contentType","error","render","target","value","node","btn"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import './App.css';\nimport { Button, TextField, Select, MenuItem } from \"@mui/material\";\nimport \"../../styles/new-post.css\";\nimport requests from \"../../requests\";\nimport { Redirect } from \"react-router-dom\";\n// TODO: Add form validation\n//import { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\n\nclass NewPost extends Component {\n  constructor(props) {\n    super(props);\n    this.getAuthorId();\n  }\n\n  state = {\n    title: \"\",\n    description: \"\",\n    content: \"\",\n    categories: \"\",\n    visibility: \"\",\n    successful_post: false,\n    author_id: \"\",\n    jwt: localStorage.getItem(\"access_token\"),\n  };\n\n  getAuthorId = async () => {\n    const response = await requests.get(\"service/get-user/\", {\n      headers: {\n        Authorization: this.state.jwt,\n        accept: \"application/json\",\n      },\n    });\n    this.setState({\n      author_id: response.data.id ? response.data.id : \"\",\n    });\n  };\n\n  handleSubmit = async () => {\n    console.log(this.state);\n    requests.defaults.headers['Authorization'] = this.state.jwt;\n    try {\n      const url = \"service/authors/\" + this.state.author_id + \"/posts/\";\n      const response = await requests.post(url, {\n        headers: {\n          accept: \"application/json\",\n        },\n        title: this.state.title,\n        author: this.state.author_id,\n        contentType: \"text/plain\",\n        content: this.state.content,\n        description: this.state.description,\n        visibility: this.state.visibility,\n        categories: this.state.categories,\n      });\n      console.log(response.data);\n      this.setState({ successful_post: true });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"background\">\n        <div className=\"form\">\n          <h1>New Post</h1>\n          <div className=\"wrapper\">\n            <TextField\n              className=\"text-input\"\n              size=\"small\"\n              type=\"text\"\n              fullWidth={true}\n              label=\"Title\"\n              value={this.state.title}\n              onChange={({ target }) =>\n                this.setState({\n                  title: target.value,\n                })\n              }\n            />\n            <br />\n            <TextField\n              className=\"text-input\"\n              size=\"small\"\n              type=\"text\"\n              fullWidth={true}\n              label=\"Description\"\n              value={this.state.description}\n              onChange={({ target }) =>\n                this.setState({\n                  description: target.value,\n                })\n              }\n            />\n            <br />\n            <TextField\n              className=\"text-input\"\n              size=\"medium\"\n              multiline={true}\n              type=\"text\"\n              fullWidth={true}\n              label=\"Content\"\n              value={this.state.content}\n              onChange={({ target }) =>\n                this.setState({\n                  content: target.value,\n                })\n              }\n            />\n            <br />\n            <TextField\n              className=\"text-input\"\n              type=\"text\"\n              label=\"Categories\"\n              fullWidth={true}\n              value={this.state.categories}\n              onChange={({ target }) =>\n                this.setState({\n                  categories: target.value,\n                })\n              }\n            />\n            <br />\n            <p>Visibility</p>\n            <Select\n              value={this.state.visibility}\n              label=\"Visibility\"\n              defaultValue=\"PUBLIC\"\n              onChange={({ target }) =>\n                this.setState({\n                  visibility: target.value,\n                })\n              }\n            >\n              <MenuItem value=\"PUBLIC\">Public</MenuItem>\n              <MenuItem value=\"FRIENDS\">Friends</MenuItem>\n            </Select>\n            <br />\n            <Button\n              variant=\"contained\"\n              onClick={this.handleSubmit}\n              ref={(node) => (this.btn = node)}\n            >\n              Post\n            </Button>\n            {this.state.successful_post && <Redirect to=\"/inbox\" />}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewPost;\n"]},"metadata":{},"sourceType":"module"}