{"ast":null,"code":"var _jsxFileName = \"/Users/victorlieu/Desktop/Development/404Project/frontend/src/components/Inbox/Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport requests from \"../../requests\";\nimport CommentDialogButton from \"../Posts/CommentDialog\";\nimport './Post.css';\nimport { Alert, Avatar, Button, ListItem, ListItemAvatar, ListItemText, ListItemSecondaryAction, ImageListItem, TextField } from \"@mui/material\";\nimport ReactMarkdown from 'react-markdown';\nimport ThumbUp from '@mui/icons-material/ThumbUp';\nimport Send from '@mui/icons-material/Send';\nimport ShareIcon from '@mui/icons-material/Share';\nimport { ClassNames } from \"@emotion/react\"; // assuming props contains all the post attributes\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Post(props) {\n  _s();\n\n  const [message, setMessage] = useState({});\n  const [commentText, setCommentText] = useState(\"\");\n  const [liked, setLiked] = useState(false);\n\n  const styles = theme => ({\n    listItemText: {\n      fontSize: '1'\n    }\n  });\n\n  const like = async () => {\n    // send POST request to authors/{authorId}/inbox/ with a like\n    try {\n      const data = {\n        summary: `${props.currentUser.displayName} likes your post.`,\n        type: \"Like\",\n        author: props.currentUser.id,\n        object: `${props.post.author.id}/posts/${props.post.id}`\n      }; // prevents sending a like twice when liking your own post\n\n      if (props.currentUser.id != props.post.author.id) {\n        const response = await requests.post(`service/authors/${props.post.author.id}/inbox/`, data, {\n          headers: {\n            Authorization: localStorage.getItem('access_token'),\n            accept: 'application/json'\n          }\n        }, {\n          withCredentials: true\n        });\n      } // change summary of like, to send like to your own inbox\n\n\n      data.summary = `You liked ${props.post.author.displayName}'s post.`;\n      sendToSelf(data);\n      setLiked(true);\n    } catch (e) {\n      console.log(e);\n      setMessage({\n        message: \"Failed to send like.\",\n        severity: \"error\"\n      });\n    }\n  };\n\n  const share = async () => {\n    try {\n      // if post is public, send to followers\n      if (props.isPublic) {\n        // add type to data\n        props.post.type = 'post';\n        sendToFollowers(props.post); // if post is private, make a copy then send to followers\n      } else {\n        const url = \"service/authors/\" + props.currentUser.id + \"/posts/\";\n        const response = await requests.post(url, {\n          headers: {\n            accept: \"application/json\"\n          },\n          title: props.post.title,\n          author: props.currentUser.id,\n          contentType: props.post.contentType,\n          content: props.post.content,\n          description: props.post.description,\n          visibility: props.post.visibility,\n          unlisted: props.post.unlisted,\n          categories: props.post.categories,\n          viewableBy: ''\n        });\n        response.data.type = 'post';\n        sendToSelf(response.data);\n        sendToFollowers(response.data);\n      }\n\n      setMessage({\n        message: \"Shared post to followers.\",\n        severity: \"success\"\n      });\n    } catch (e) {\n      setMessage({\n        message: \"Failed to share post.\",\n        severity: \"error\"\n      });\n    }\n  };\n\n  const sendToFollowers = async my_post => {\n    // Get Followers\n    const response = await requests.get(`service/authors/${props.currentUser.id}/followers/`);\n    const followerList = response.data.items; // For each follower: send post to inbox\n\n    for (let index = 0; index < followerList.length; ++index) {\n      const follower = followerList[index];\n      await requests.post(`service/authors/${follower.id}/inbox/`, my_post, {\n        headers: {\n          Authorization: localStorage.getItem('access_token'),\n          accept: 'application/json'\n        }\n      }, {\n        withCredentials: true\n      });\n    }\n  }; // send a like or comment notification to your own inbox\n\n\n  const sendToSelf = async my_item => {\n    const response_self = await requests.post(`service/authors/${props.currentUser.id}/inbox/`, my_item, {\n      headers: {\n        Authorization: localStorage.getItem('access_token'),\n        accept: 'application/json'\n      }\n    }, {\n      withCredentials: true\n    });\n  };\n\n  useEffect(() => {\n    setLiked(props.likedByCurrent);\n  }, []);\n  console.log(props.currentUser.id);\n  console.log(props.post.id);\n  console.log(props.post.author);\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n      id: \"title\",\n      primaryTypographyProps: {\n        fontSize: '30px'\n      },\n      primary: props.post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n      id: \"author\",\n      primary: \"By: \" + props.post.author.displayName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this), props.post.contentType == \"text/markdown\" && /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n      children: props.post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 55\n    }, this), props.post.contentType == \"text/plain\" && /*#__PURE__*/_jsxDEV(ListItemText, {\n      primary: props.post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 54\n    }, this), (props.post.contentType == \"application/base64\" || props.post.contentType == \"image/png;base64\" || props.post.contentType == \"image/jpeg;base64\") && /*#__PURE__*/_jsxDEV(ImageListItem, {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: props.post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 159\n    }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n      id: \"description\",\n      primary: props.post.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"comment-like-section\",\n      children: [liked ? /*#__PURE__*/_jsxDEV(Button, {\n        disabled: true,\n        variant: \"contained\",\n        children: \"Liked\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(Button, {\n        id: \"like-button\",\n        startIcon: /*#__PURE__*/_jsxDEV(ThumbUp, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 26\n        }, this),\n        onClick: like,\n        children: \"Like\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"comment-section\",\n        children: /*#__PURE__*/_jsxDEV(CommentDialogButton, {\n          current_author: props.currentUser.id,\n          post_id: props.post.id,\n          author_id: props.author.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"share-section\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          startIcon: /*#__PURE__*/_jsxDEV(ShareIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 28\n          }, this),\n          onClick: share,\n          children: \"Share\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }, this), message.message && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: message.severity,\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Post, \"7ITSyvlSuMm1xLq4MYlakU7EoO8=\");\n\n_c = Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/victorlieu/Desktop/Development/404Project/frontend/src/components/Inbox/Post.js"],"names":["React","useState","useEffect","requests","CommentDialogButton","Alert","Avatar","Button","ListItem","ListItemAvatar","ListItemText","ListItemSecondaryAction","ImageListItem","TextField","ReactMarkdown","ThumbUp","Send","ShareIcon","ClassNames","Post","props","message","setMessage","commentText","setCommentText","liked","setLiked","styles","theme","listItemText","fontSize","like","data","summary","currentUser","displayName","type","author","id","object","post","response","headers","Authorization","localStorage","getItem","accept","withCredentials","sendToSelf","e","console","log","severity","share","isPublic","sendToFollowers","url","title","contentType","content","description","visibility","unlisted","categories","viewableBy","my_post","get","followerList","items","index","length","follower","my_item","response_self","likedByCurrent"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport requests from \"../../requests\";\nimport CommentDialogButton from \"../Posts/CommentDialog\";\nimport './Post.css'\n\nimport { Alert,\n        Avatar,\n        Button,\n        ListItem,\n        ListItemAvatar,\n        ListItemText,\n        ListItemSecondaryAction,\n        ImageListItem,\n        TextField,\n        } from \"@mui/material\";\nimport ReactMarkdown from 'react-markdown'\nimport ThumbUp from '@mui/icons-material/ThumbUp'\nimport Send from '@mui/icons-material/Send'\nimport ShareIcon from '@mui/icons-material/Share';\nimport { ClassNames } from \"@emotion/react\";\n\n// assuming props contains all the post attributes\nexport default function Post(props) {\n  const [message, setMessage] = useState({});\n    const [commentText, setCommentText] = useState(\"\")\n    const [liked, setLiked] = useState(false)\n\n    const styles = theme => ({\n        listItemText:{\n          fontSize: '1',\n        }\n      });\n\n    const like = async () => {\n        // send POST request to authors/{authorId}/inbox/ with a like\n        try {\n          const data = {\n            summary: `${props.currentUser.displayName} likes your post.`,\n            type: \"Like\",\n            author: props.currentUser.id,\n            object: `${props.post.author.id}/posts/${props.post.id}`\n          }\n          // prevents sending a like twice when liking your own post\n          if (props.currentUser.id != props.post.author.id){\n            const response = await requests.post(`service/authors/${props.post.author.id}/inbox/`,\n              data,\n              {headers: {\n                Authorization: localStorage.getItem('access_token'),\n                accept: 'application/json',\n              }},\n              {withCredentials: true});\n          }\n          \n          // change summary of like, to send like to your own inbox\n          data.summary = `You liked ${props.post.author.displayName}'s post.`\n          sendToSelf(data);\n         setLiked(true)\n        } catch (e) {\n          console.log(e)\n          setMessage({message: \"Failed to send like.\", severity: \"error\"});\n        }   \n    }\n\n    const share = async () => {\n      try {\n        // if post is public, send to followers\n        if (props.isPublic) {\n          // add type to data\n          props.post.type = 'post'\n          sendToFollowers(props.post);\n        // if post is private, make a copy then send to followers\n        } else {\n          const url = \"service/authors/\" + props.currentUser.id + \"/posts/\";\n          const response = await requests.post(url, {\n          headers: {\n            accept: \"application/json\",\n          },\n          title: props.post.title,\n          author: props.currentUser.id,\n          contentType: props.post.contentType,\n          content: props.post.content,\n          description: props.post.description,\n          visibility: props.post.visibility,\n          unlisted: props.post.unlisted,\n          categories: props.post.categories,\n          viewableBy: '',\n        });\n\n        response.data.type = 'post'\n        sendToSelf(response.data)\n        sendToFollowers(response.data);\n        }\n      setMessage({message: \"Shared post to followers.\", severity: \"success\"});\n      } catch(e) {\n        setMessage({message: \"Failed to share post.\", severity: \"error\"});\n      }\n\n    }\n\n    const sendToFollowers = async (my_post) => {\n      // Get Followers\n      const response = await requests.get(\n        `service/authors/${props.currentUser.id}/followers/`\n      );\n      const followerList = response.data.items;\n  \n      // For each follower: send post to inbox\n      for (let index = 0; index < followerList.length; ++index) {\n        const follower = followerList[index];\n        await requests.post(\n          `service/authors/${follower.id}/inbox/`,\n          my_post,\n          {headers: {\n            Authorization: localStorage.getItem('access_token'),\n            accept: 'application/json',\n          }},\n          {withCredentials:true});\n      }\n    };\n  \n    // send a like or comment notification to your own inbox\n    const sendToSelf = async (my_item) => {\n      const response_self = await requests.post(\n        `service/authors/${props.currentUser.id}/inbox/`,\n        my_item,\n        {headers: {\n          Authorization: localStorage.getItem('access_token'),\n          accept: 'application/json',\n        }},\n        {withCredentials:true});\n    };\n\n    useEffect(() => {\n      setLiked(props.likedByCurrent);\n    }, [])\n\n    console.log(props.currentUser.id);\n    console.log(props.post.id);\n    console.log(props.post.author);\n    return (\n      <ListItem>\n        <ListItemText\n          id=\"title\"\n          primaryTypographyProps={{fontSize: '30px'}}\n          primary={props.post.title}\n        />\n        <ListItemText\n          id=\"author\"\n          primary={\"By: \" + props.post.author.displayName}\n        />\n        {props.post.contentType == \"text/markdown\" && <ReactMarkdown>\n          {props.post.content}\n          </ReactMarkdown>}\n        {(props.post.contentType == \"text/plain\") && <ListItemText\n          primary={props.post.content}\n        />}\n        {(props.post.contentType == \"application/base64\" || props.post.contentType == \"image/png;base64\" || props.post.contentType == \"image/jpeg;base64\") && <ImageListItem\n          children={<img src={props.post.content}></img>}\n        />}\n        <ListItemText\n          id=\"description\"\n          primary={props.post.description}\n        />\n        <div id=\"comment-like-section\">\n        {liked ? (<Button\n                    disabled\n                    variant=\"contained\">\n                      Liked\n                    </Button>)  \n            : (<Button \n              id=\"like-button\"\n              startIcon={<ThumbUp />}\n              onClick={like}>\n                  Like\n              </Button>)}\n            \n            <span id=\"comment-section\">\n                <CommentDialogButton\n                current_author = {props.currentUser.id}\n                post_id = {props.post.id}\n                author_id = {props.author.id}/>\n            </span>\n            <span id=\"share-section\">\n              <Button\n                variant=\"contained\"\n                startIcon={<ShareIcon />}\n                onClick={share}>\n                  Share\n              </Button>\n            </span>\n        {message.message && (\n        <Alert severity={message.severity}>\n          {message.message}\n        </Alert>\n        )}\n        </div>\n      </ListItem>\n    );\n}"]},"metadata":{},"sourceType":"module"}